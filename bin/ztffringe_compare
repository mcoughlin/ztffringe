#!/usr/bin/env python

import os
import numpy as np
import glob
import optparse
#import aplpy

import matplotlib
#matplotlib.rc('text', usetex=True)
matplotlib.use('Agg')
matplotlib.rcParams.update({'font.size': 16})
matplotlib.rcParams['contour.negative_linestyle'] = 'solid'
import matplotlib.colors as colors
import matplotlib.cm as cmx
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
from mpl_toolkits.axes_grid1 import make_axes_locatable

from astropy.time import Time, TimeDelta
import astropy.units as u

from astropy.io import fits
from astropy.table import Table, vstack

import tqdm
import aplpy

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()
    parser.add_option("--doPlots",  action="store_true", default=False)
    parser.add_option("--doImages",  action="store_true", default=False)
    parser.add_option("--doWriteFits",  action="store_true", default=False)
    parser.add_option("--doMosaic",  action="store_true", default=False)

    parser.add_option("-f","--filename",default="../data/fringe_PCArandom_comp06.c01_q1.20190907.fits")
    parser.add_option("-o","--outputDir",default="../output")

    opts, args = parser.parse_args()

    return opts

def generate_heightfield(fractal_dimension=2.5, n=512, seed=123):

    H = 1 - (fractal_dimension - 2)
    kpow = -(H + 1.0) / 2.0
    
    A = np.zeros((n, n), complex)

    kvec = np.fft.fftfreq(n)
    k0 = kvec[n // 64]
    kx, ky = np.meshgrid(kvec, kvec, sparse=True, copy=False)
    ksq = kx ** 2 + ky ** 2
    m = ksq > 0

    gen = np.random.RandomState(seed=seed)    
    phase = 2 * np.pi * gen.uniform(size=(n, n))
    A[m] = ksq[m] ** kpow * gen.normal(size=(n, n))[m] * np.exp(1.j * phase[m]) * np.exp(-ksq[m] / k0 ** 2)

    return np.fft.ifft2(A)

def simulate_fringes(n1=3.6, n2=1.5, amp1=0.02, amp2=0.05, nwaves_rms=10.,
                     seed=123, savefile=None):
    X = generate_heightfield(2.5, 512, seed)
    X *= nwaves_rms / np.std(X.real)
    Z = amp1 * np.sin(2 * n1 * X.real) + amp2 * np.sin(2 * n2 * X.imag)

    if not savefile is None:
        fig = plt.figure(figsize=(10, 10))
        vlim = np.max(np.abs(Z))
        plt.imshow(Z, cmap='gray', vmin=-8*vlim, vmax=+4*vlim)
        plt.axis('off')
        plt.tight_layout()
        plt.savefig(savefile)
        plt.close()

    return Z

# Parse command line
opts = parse_commandline()

# ----- settings ------ #
baseoutdir = opts.outputDir

dataDirSplit = list(filter(None,opts.filename.split(".")))
imagenum = dataDirSplit[-3]
datenum = dataDirSplit[-2]

outdir = os.path.join(baseoutdir, datenum, imagenum)
if not os.path.isdir(outdir):
    os.makedirs(outdir)

##################################
#                                #
#           PREPARATION          #
#                                #
##################################

if opts.doPlots:
    hdulist = fits.open(opts.filename)

    fig = plt.figure(figsize=(20,20))
    f1 = aplpy.FITSFigure(opts.filename,figure=fig)
    #f1.set_tick_labels_font(size='x-small')
    #f1.set_axis_labels_font(size='small')
    f1.show_grayscale(vmin=-1,vmax=1)
    plotName = os.path.join(outdir,'fits.pdf')
    fig.canvas.draw()
    plt.savefig(plotName)
    plt.close()

if opts.doPlots:
    plotName = os.path.join(outdir,'fringes.pdf')
    Z = simulate_fringes(savefile=plotName)
else:
    Z = simulate_fringes()
