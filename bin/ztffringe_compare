#!/usr/bin/env python

import os
import numpy as np
import scipy.stats
import glob
import optparse
#import aplpy

import matplotlib
#matplotlib.rc('text', usetex=True)
matplotlib.use('Agg')
matplotlib.rcParams.update({'font.size': 16})
matplotlib.rcParams['contour.negative_linestyle'] = 'solid'
import matplotlib.colors as colors
import matplotlib.cm as cmx
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
from mpl_toolkits.axes_grid1 import make_axes_locatable

from astropy.time import Time, TimeDelta
import astropy.units as u

from astropy.io import fits
from astropy.table import Table, vstack

import tqdm
import aplpy

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser()
    parser.add_option("--doPlots",  action="store_true", default=False)
    parser.add_option("--doPE",  action="store_true", default=False)

    parser.add_option("-f","--filename",default="../data/fringe_PCArandom_comp06.c01_q1.20190907.fits")
    parser.add_option("-o","--outputDir",default="../output")

    opts, args = parser.parse_args()

    return opts

def myprior(cube, ndim, nparams):

        cube[0] = cube[0]*10.0
        cube[1] = cube[1]*10.0
        cube[2] = cube[2]*10.0
        cube[3] = cube[3]*10.0
        cube[4] = cube[4]*10.0

def myloglike(cube, ndim, nparams):
        n1 = cube[0]
        n2 = cube[1]
        amp1 = cube[2]
        amp2 = cube[3]
        nwaves_rms = cube[4]

        Z = simulate_fringes(imsize=imsize, n1=n1, n2=n2, amp1=amp1, amp2=amp2,
                             nwaves_rms=nwaves_rms)
        Z = Z - np.median(Z)
        Z = Z/np.std(Z)

        sigma = 0.1
        chisquarevals = ((imdata-Z)/sigma)**2
        chisquaresum = np.sum(chisquarevals)
        chisquaresum = (1/float(len(chisquarevals)-1))*chisquaresum
        chiprob = scipy.stats.chi2.logpdf(chisquaresum, 1, loc=0, scale=1)

        print(n1, n2, amp1, amp2, nwaves_rms, chiprob)

        return chiprob

def generate_heightfield(fractal_dimension=2.5, imsize=512, seed=123):

    H = 1 - (fractal_dimension - 2)
    kpow = -(H + 1.0) / 2.0
    
    A = np.zeros((imsize, imsize), complex)

    kvec = np.fft.fftfreq(imsize)
    k0 = kvec[imsize // 64]
    kx, ky = np.meshgrid(kvec, kvec, sparse=True, copy=False)
    ksq = kx ** 2 + ky ** 2
    m = ksq > 0

    gen = np.random.RandomState(seed=seed)    
    phase = 2 * np.pi * gen.uniform(size=(imsize, imsize))
    A[m] = ksq[m] ** kpow * gen.normal(size=(imsize, imsize))[m] * np.exp(1.j * phase[m]) * np.exp(-ksq[m] / k0 ** 2)

    return np.fft.ifft2(A)

def simulate_fringes(n1=3.6, n2=1.5, amp1=0.02, amp2=0.05, nwaves_rms=10.,
                     seed=123, imsize=512, savefile=None):
    X = generate_heightfield(2.5, imsize, seed)
    X *= nwaves_rms / np.std(X.real)
    Z = amp1 * np.sin(2 * n1 * X.real) + amp2 * np.sin(2 * n2 * X.imag)

    if xsize < imsize:
        Z = Z[:xsize,:]
    elif ysize < imsize:
        Z = Z[:,:ysize]

    if not savefile is None:
        fig = plt.figure(figsize=(10, 10))
        vlim = np.max(np.abs(Z))
        plt.imshow(Z, cmap='gray', vmin=-8*vlim, vmax=+4*vlim)
        plt.axis('off')
        plt.tight_layout()
        plt.savefig(savefile)
        plt.close()

    return Z

# Parse command line
opts = parse_commandline()

# ----- settings ------ #
baseoutdir = opts.outputDir

dataDirSplit = list(filter(None,opts.filename.split(".")))
imagenum = dataDirSplit[-3]
datenum = dataDirSplit[-2]

outdir = os.path.join(baseoutdir, datenum, imagenum)
if not os.path.isdir(outdir):
    os.makedirs(outdir)

##################################
#                                #
#           PREPARATION          #
#                                #
##################################

hdulist = fits.open(opts.filename)
imdata = hdulist[0].data
xsize, ysize = imdata.shape
imsize = np.max([xsize, ysize])
imdata = imdata - np.median(imdata)
imdata = imdata / np.std(imdata)

if opts.doPlots:
    fig = plt.figure(figsize=(20,20))
    f1 = aplpy.FITSFigure(opts.filename,figure=fig)
    #f1.set_tick_labels_font(size='x-small')
    #f1.set_axis_labels_font(size='small')
    f1.show_grayscale(vmin=-1,vmax=1)
    plotName = os.path.join(outdir,'fits.pdf')
    fig.canvas.draw()
    plt.savefig(plotName)
    plt.close()

if opts.doPE:
    import pymultinest

    n_live_points = 100
    evidence_tolerance = 0.5
    max_iter = 1000
    
    parameters = ["n1","n2","amp1","amp2","nwaves_rms"]
    labels = [r"$n_1$",r"$n_2$",r"$amp_1$",r"$amp_2$",r"$nwaves_{\rm rms}$"]
    n_params = len(parameters)
    pymultinest.run(myloglike, myprior, n_params, importance_nested_sampling = False, resume = True, verbose = True, sampling_efficiency = 'parameter', n_live_points = n_live_points, outputfiles_basename='%s/2-'%outdir, evidence_tolerance = evidence_tolerance, multimodal = False, max_iter = max_iter)
    
    multifile = os.path.join(outdir, '2-post-equal-weights.dat')
    data = np.loadtxt(multifile)

    n1 = data[:,0]
    n2 = data[:,1]
    amp1 = data[:,2]
    amp2 = data[:,3]
    nwaves_rms = data[:,4]
    loglikelihood = data[:,5]
    idx = np.argmax(loglikelihood)

    n1_best = data[idx,0]
    n2_best = data[idx,1]
    amp1_best = data[idx,2]
    amp2_best = data[idx,3]
    nwaves_rms_best = data[idx,4]
else:
    n1_best = 3.6
    n2_best = 1.5
    amp1_best = 0.10
    amp2_best = 0.05
    nwaves_rms_best = 2.0

if opts.doPlots:
    plotName = os.path.join(outdir,'fringes.pdf')
    Z = simulate_fringes(savefile=plotName, imsize=imsize,
                         n1=n1_best, n2=n2_best,
                         amp1=amp1_best, amp2=amp2_best,
                         nwaves_rms=nwaves_rms_best)
